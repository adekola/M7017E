/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab1;

import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author adekola
 */
public class SettingsDialog extends javax.swing.JDialog {

    /**
     * Creates new form SettingsDialog
     */
    
    
    /** This is an array of QualityItems to represent the different levels of Quality which can be 
     * selected by the user for recording a vorbis encoded clip
     * 
     */
    private QualityItem[] qualityLevels = new QualityItem[]{
        new QualityItem(0.1f, "Low Quality"), 
        new QualityItem(0.6f, "Medium Quality"),
        new QualityItem(1, "High Quality")
    };
    
    //reference to the settings instance used by CoreApp
    private Settings settings;
    
    
    /** Constructor for the Dialog
     * 
     * @param parent -  the GUI component which owns this Dialog
     * @param modal- boolean flag to make the dialog modal or not
     * @param settings - reference to the settings instance used by CoreApp
     */
    public SettingsDialog(java.awt.Frame parent, boolean modal, Settings settings) {
        super(parent, modal);
        initComponents();
        
        this.setTitle("Settings");
        this.setModal(modal);
        this.setResizable(false);
        this.setLocationRelativeTo(null); 
        
        this.settings =  settings;
        //Set the model of the combo box for quality
        DefaultComboBoxModel model =  new DefaultComboBoxModel(qualityLevels);
        cbxQualityLevels.setModel(model);
        //then set the selected value to be the one saved in the settings
        cbxQualityLevels.setSelectedIndex(getIndexOfSelectedQuality(settings.getQuality()));

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SettingsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    /** This method tries to get the index of the quality selected by the
     * user from the QualityItems array
     * 
     * @param quality
     * @return 
     */
    int getIndexOfSelectedQuality(float quality){
        int indexFound = 0;
        for(int i = 0; i< qualityLevels.length; i++){
            if (Float.compare(qualityLevels[i].getValue(), quality) == 0){
                indexFound = i;
                break;
            }
        }
        return indexFound;
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        cbxQualityLevels = new javax.swing.JComboBox();
        btnSavePreferences = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cbxAudioFormats = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel3.setText("Choose Encoding Quality:");

        btnSavePreferences.setText("save");
        btnSavePreferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSavePreferencesActionPerformed(evt);
            }
        });

        jLabel2.setText("Choose Encoding format");

        cbxAudioFormats.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ogg", "Mp3" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnSavePreferences, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(cbxAudioFormats, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addComponent(cbxQualityLevels, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbxAudioFormats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel3)
                .addGap(8, 8, 8)
                .addComponent(cbxQualityLevels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSavePreferences)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSavePreferencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSavePreferencesActionPerformed
        // TODO add your handling code here:
        settings.setPreferredEncoding(String.valueOf(cbxAudioFormats.getSelectedItem()));
        QualityItem selectedQuality = (QualityItem)cbxQualityLevels.getSelectedItem();
        settings.setQuality(selectedQuality.getValue());
        getOwner().setEnabled(true);
        this.dispose();
    }//GEN-LAST:event_btnSavePreferencesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSavePreferences;
    private javax.swing.JComboBox cbxAudioFormats;
    private javax.swing.JComboBox cbxQualityLevels;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables

    
    //This class represents the Quality levels selectable by the user
    class QualityItem {

        float value;
        String label;

        public QualityItem(float value, String label) {
            this.value = value;
            this.label = label;
        }

        public float getValue() {
            return value;
        }

        public String getLabel() {
            return label;
        }

        @Override
        public String toString() {
            return label;
        }
    }
}
