/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab1;

import java.io.File;
import java.io.FilenameFilter;
import java.util.Vector;
import javax.swing.DefaultBoundedRangeModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.gstreamer.Bus;
import org.gstreamer.Format;
import org.gstreamer.Gst;
import org.gstreamer.GstObject;
import org.gstreamer.Pipeline;
import org.gstreamer.swing.PipelinePositionModel;

/**
 *
 * @author adekola
 */
public class AudioCapture extends javax.swing.JFrame {

    CoreApp app;
    DefaultListModel recordingsListModel;
    String recordToPlay;

    PipelinePositionModel recorderPosition;
    PipelinePositionModel playerPosition;

    /**
     * Creates new form AudioCap
     */
    public AudioCapture() {
        Gst.init(); //should this really be here or could it be somewhere else instead?
        recordingsListModel = new DefaultListModel();
        app = new CoreApp();
        initComponents();
        getExistingRecordings();
        recorderPosition = new PipelinePositionModel(app.getRecorder());
        playerPosition = new PipelinePositionModel(app.getPlayer());

        setupSliderListener();

        app.getPlayer().getBus().connect(new Bus.EOS() {
            public void endOfStream(GstObject source) {
                resetTimingElements();
                if(app.isAutoPlayBack())
                    initiateSave();
            }
        });
       
    }

    private void resetTimingElements() {
        //reset the slider position and time label
        positionSlider.setModel(new DefaultBoundedRangeModel());
        lblTimeLapse.setText("0:00:00");
    }

    private void setupSliderListener() {
        this.positionSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                updateTimeLabel();
            }
        });
    }

    void updateTimeLabel() {
        Pipeline activePipeline = new Pipeline();

        if (app.isPlaying()) {
            activePipeline = app.getPlayer();
        } else if (app.isRecording()) {
            activePipeline = app.getRecorder();
        }

        long currPosition = activePipeline.queryPosition(Format.TIME);

        currPosition = currPosition / 1000000000L;
        lblTimeLapse.setText(String.format("%d:%02d:%02d", currPosition / 3600, (currPosition % 3600) / 60, (currPosition % 3600)));

    }

    void getExistingRecordings() {
        String recordsFolder = app.getRecordingsFolderPath();

        File folder = new File(recordsFolder);

        File[] recordings = folder.listFiles(new OggFilter());

        for (File file : recordings) {
            String fileName = file.getName();
            recordingsListModel.addElement(fileName.substring(0, fileName.length() - 4));//knocks off the extension..or maybe it's fine to have it 
        }

        listRecords.setModel(recordingsListModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listRecords = new javax.swing.JList();
        positionSlider = new javax.swing.JSlider();
        btnRecord = new javax.swing.JToggleButton();
        btnStop = new javax.swing.JToggleButton();
        lblTimeLapse = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Audio Recorder 1.0");

        listRecords.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listRecordsMouseClicked(evt);
            }
        });
        listRecords.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listRecordsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listRecords);

        positionSlider.setValue(0);
        positionSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                positionSliderStateChanged(evt);
            }
        });

        btnRecord.setText("record");
        btnRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecordActionPerformed(evt);
            }
        });

        btnStop.setText("stop");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        lblTimeLapse.setText("HH:mm:ss");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnRecord)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnStop)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(positionSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblTimeLapse)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRecord)
                    .addComponent(btnStop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(lblTimeLapse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(positionSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        // TODO add your handling code here:
        btnStop.setSelected(true);
        btnRecord.setSelected(false);
        app.stopRecording();
        this.positionSlider.setModel(playerPosition);
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecordActionPerformed
        // TODO add your handling code here:
        btnRecord.setSelected(true);
        btnStop.setSelected(false);
        this.positionSlider.setModel(recorderPosition);
        app.startRecording();
    }//GEN-LAST:event_btnRecordActionPerformed

    private void initiateSave() {
        // TODO add your handling code here:
        String defaultFileName = app.generateDefaultFileName();
        String fileName = JOptionPane.showInputDialog(this, "Please enter a file name", defaultFileName);
        if (fileName == null) {
            app.disposeLastRecording();
            resetTimingElements();
        } else {
            if (fileName.equals("")) {
                fileName = defaultFileName;
            }
            
            app.renameLastRecord(fileName);
            //update the list of files showing in the list
            recordingsListModel.addElement(fileName);
            resetTimingElements();
        }
    }

    private void listRecordsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listRecordsMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) { // a user clicks twice = Double click
            app.stopPlayback(); //first stop the currently playing process

            recordToPlay = (String) listRecords.getSelectedValue();
            this.positionSlider.setModel(playerPosition);
            app.startPlayback(recordToPlay);
        }
    }//GEN-LAST:event_listRecordsMouseClicked

    private void listRecordsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listRecordsValueChanged
        // TODO add your handling code here:
        if (!evt.getValueIsAdjusting()) { //checks that the value changing event is the last in the chain in this case, the mouse up during a click action
            recordToPlay = (String) listRecords.getSelectedValue();
        }
    }//GEN-LAST:event_listRecordsValueChanged

    private void positionSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_positionSliderStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_positionSliderStateChanged

    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AudioCapture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AudioCapture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AudioCapture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AudioCapture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AudioCapture().setVisible(true);
            }
        });
    }

    class OggFilter implements FilenameFilter {

        @Override
        public boolean accept(File file, String fileName) {
            return fileName.endsWith(".ogg");
        }
    }

    class Mp3Filter implements FilenameFilter {

        @Override
        public boolean accept(File file, String fileName) {
            return fileName.endsWith(".mp3");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnRecord;
    private javax.swing.JToggleButton btnStop;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTimeLapse;
    private javax.swing.JList listRecords;
    private javax.swing.JSlider positionSlider;
    // End of variables declaration//GEN-END:variables
}
